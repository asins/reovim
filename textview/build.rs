use std::io::Write;

fn main() {
    let boxes = std::fs::read_to_string("box_drawing.txt").unwrap();

    let mut box_drawing = std::fs::OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open("src/box_drawing.rs")
        .unwrap();

    box_drawing
        .write_all(
            b"/// Generated by build.rs; do not edit!

const fn box_drawing_5_by_5_bitmap(x11: u32, x12: u32, x13: u32, x14: u32, x15: u32,
                                   x21: u32, x22: u32, x23: u32, x24: u32, x25: u32,
                                   x31: u32, x32: u32, x33: u32, x34: u32, x35: u32,
                                   x41: u32, x42: u32, x43: u32, x44: u32, x45: u32,
                                   x51: u32, x52: u32, x53: u32, x54: u32, x55: u32) -> u32 {
	((x11) << 24) | ((x12) << 23) | ((x13) << 22) | ((x14) << 21) | ((x15) << 20) |
	 ((x21) << 19) | ((x22) << 18) | ((x23) << 17) | ((x24) << 16) | ((x25) << 15) |
	 ((x31) << 14) | ((x32) << 13) | ((x33) << 12) | ((x34) << 11) | ((x35) << 10) |
	 ((x41) <<  9) | ((x42) <<  8) | ((x43) <<  7) | ((x44) <<  6) | ((x45) <<  5) |
	 ((x51) <<  4) | ((x52) <<  3) | ((x53) <<  2) | ((x54) <<  1) | ((x55))
}

/// Definition of most of the glyphs in the 2500..257F range as 5x5 bitmaps
/// (bits 24..0 in the obvious order), see ../doc/boxes.txt

pub const DRAW_BOX_DRAWING_BITMAPS: [u32; 128] = [
",
        )
        .unwrap();

    let mut box_lines = boxes.lines();

    for _ in 0x2500..0x2580 {
        let header = box_lines.next().unwrap();
        box_drawing.write_all(b"\t// ").unwrap();
        box_drawing.write_all(header.as_bytes()).unwrap();
        box_drawing
            .write_all(b"\n\tbox_drawing_5_by_5_bitmap(\n")
            .unwrap();
        for _ in 0..5 {
            let line = box_lines.next().unwrap();
            box_drawing.write_all(b"\t\t").unwrap();
            let p = line
                .chars()
                .map(|c| if c == 'â–“' { "1, " } else { "0, " })
                .collect::<String>();
            box_drawing.write_all(p.as_bytes()).unwrap();
            box_drawing.write_all(b"\n").unwrap();
        }
        box_drawing.write_all(b"\t),\n").unwrap();
    }
    box_drawing.write_all(b"];").unwrap();
}
